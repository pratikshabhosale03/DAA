import java.util.Scanner;

public class knapdp {

    // Function to calculate the maximum value using dynamic programming
    public static int knapsack(int[] values, int[] weights, int capacity) {
        int n = values.length;
        int[][] dp = new int[n + 1][capacity + 1]; // DP table

        // Fill the DP table row by row
        for (int i = 1; i <= n; i++) {
            for (int w = 1; w <= capacity; w++) {
                if (weights[i - 1] <= w) {
                    // Max of including or excluding the current item
                    dp[i][w] = Math.max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);
                } else {
                    // Exclude the current item
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

        return dp[n][capacity]; // Max value for the full capacity
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input the knapsack capacity and number of items
        System.out.print("Enter knapsack capacity: ");
        int capacity = sc.nextInt();

        System.out.print("Enter number of items: ");
        int n = sc.nextInt();

        int[] values = new int[n];
        int[] weights = new int[n];

        // Input values and weights of items
        for (int i = 0; i < n; i++) {
            System.out.print("Enter value of item " + (i + 1) + ": ");
            values[i] = sc.nextInt();
            System.out.print("Enter weight of item " + (i + 1) + ": ");
            weights[i] = sc.nextInt();
        }

        // Call the knapsack function and display the result
        int maxValue = knapsack(values, weights, capacity);
        System.out.println("Maximum value the knapsack can hold is: " + maxValue);

        sc.close(); // Close the scanner
    }
} 
